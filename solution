const TAB_ID = Date.now() + '_' + Math.random();
const PING_KEY = 'tab-check-ping-' + TAB_ID;
const RESPONSE_KEY = 'tab-check-response-' + TAB_ID;
const CLOSE_SIGNAL_KEY = 'tab-close-' + TAB_ID;

let isDuplicate = false;
const IS_PING_SENDER = true; // This tab initiated the ping

// Step 1: Ping other tabs to check if this is a duplicate
localStorage.setItem(PING_KEY, 'ping');

// Step 2: Handle all relevant storage events
window.addEventListener('storage', (e) => {
  // 1. Another tab pinged us
  if (e.key && e.key.startsWith('tab-check-ping-')) {
    const newTabId = e.key.substring('tab-check-ping-'.length);
    const newTabResponseKey = 'tab-check-response-' + newTabId;

    // Only respond if this is NOT the tab that pinged
    if (newTabId !== TAB_ID) {
      alert('🚨 A duplicate tab has been opened.');
      localStorage.setItem(newTabResponseKey, 'duplicate');
    }
  }

  // 2. We (only the ping sender) receive a response, confirming we are duplicate
  if (e.key === RESPONSE_KEY && e.newValue === 'duplicate') {
    if (IS_PING_SENDER && !isDuplicate) {
      isDuplicate = true;
      console.log('⚠️ This is a duplicate tab.');

      // Submit hidden form to simulate conflict
      const form = document.createElement('form');
      form.style.display = 'none';
      form.method = 'POST';
      form.action = '/submit-duplicate'; // Simulated endpoint
      document.body.appendChild(form);
      form.submit();
    }
  }

  // 3. Main tab receives conflict report from duplicate
  if (e.key && e.key.startsWith('tab-conflict-')) {
    const dupTabId = e.key.substring('tab-conflict-'.length);
    const closeKey = 'tab-close-' + dupTabId;

    // Only alert if we're not the duplicate
    if (dupTabId !== TAB_ID) {
      alert('🚨 A duplicate tab caused a conflict and will now be closed.');
      localStorage.setItem(closeKey, 'close');
    }
  }

  // 4. Duplicate tab receives close signal
  if (e.key === CLOSE_SIGNAL_KEY && e.newValue === 'close') {
    window.close();

    // Fallback if window.close() is blocked
    setTimeout(() => {
      document.body.innerHTML = '<h1>This tab was a duplicate and has been deactivated.</h1>';
    }, 100);
  }
});

// Step 3: Main tab confirmation (after brief timeout)
setTimeout(() => {
  if (!isDuplicate) {
    console.log('✅ This is the first (main) tab.');
  }

  // Optional cleanup
  localStorage.removeItem(PING_KEY);
  localStorage.removeItem(RESPONSE_KEY);
}, 300);

// Step 4: Simulate 409 in duplicate tab
window.addEventListener('load', () => {
  if (isDuplicate) {
    setTimeout(() => {
      const conflictKey = 'tab-conflict-' + TAB_ID;
      localStorage.setItem(conflictKey, '409');
    }, 1000);
  }
});
