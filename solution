const MAIN_TAB_KEY = 'main-tab-id';
const TAB_ID = Date.now() + '_' + Math.random();
const PING_KEY = 'tab-check-ping-' + TAB_ID;
const RESPONSE_KEY = 'tab-check-response-' + TAB_ID;

let isDuplicate = false;

// 1. Check if a main tab exists
const existingMainTabId = localStorage.getItem(MAIN_TAB_KEY);
if (!existingMainTabId) {
  // No main tab found — claim it
  localStorage.setItem(MAIN_TAB_KEY, TAB_ID);
  console.log('✅ No main tab detected. This tab is now the main tab.');
} else {
  // Main tab exists — ping to check for duplication
  console.log('ℹ️ Detected existing main tab. Pinging to confirm if duplicate.');
  localStorage.setItem(PING_KEY, 'ping');
}

// 2. Listen for storage events
window.addEventListener('storage', (e) => {
  // Main tab receives ping
  if (e.key && e.key.startsWith('tab-check-ping-')) {
    const newTabId = e.key.substring('tab-check-ping-'.length);
    const responseKey = 'tab-check-response-' + newTabId;

    if (localStorage.getItem(MAIN_TAB_KEY) === TAB_ID) {
      // Only main tab responds
      alert('🚨 A duplicate tab has been opened.');
      localStorage.setItem(responseKey, 'duplicate');
    }
  }

  // Duplicate tab receives response
  if (e.key === RESPONSE_KEY && e.newValue === 'duplicate') {
    markAsDuplicate();
  }

  // Main tab receives conflict signal
  if (e.key === 'tab-conflict-' + TAB_ID) {
    alert('⚠️ A duplicate tab caused a conflict.');
  }
});

// 3. Fallback after 500ms only if another main tab exists and no response was received
setTimeout(() => {
  const currentMainTabId = localStorage.getItem(MAIN_TAB_KEY);
  if (!isDuplicate && currentMainTabId && currentMainTabId !== TAB_ID) {
    console.warn('⏰ No response received. Assuming this tab is a duplicate.');
    markAsDuplicate();
  } else if (currentMainTabId === TAB_ID) {
    console.log('✅ Confirmed as main tab.');
  }
}, 500);

// 4. Handle duplicate tab logic
function markAsDuplicate() {
  if (isDuplicate) return;
  isDuplicate = true;

  console.warn('⚠️ This is a duplicate tab. Submitting hidden form...');
  submitHiddenForm();

  // Simulate server conflict (e.g. 409)
  setTimeout(() => {
    const mainId = localStorage.getItem(MAIN_TAB_KEY);
    if (mainId && mainId !== TAB_ID) {
      localStorage.setItem('tab-conflict-' + mainId, '409');
    }
  }, 1000);
}

// 5. Hidden form submission (runs only in duplicates)
function submitHiddenForm() {
  const form = document.createElement('form');
  form.style.display = 'none';
  form.method = 'POST';
  form.action = '/submit-duplicate'; // Replace with your real endpoint
  document.body.appendChild(form);
  form.submit();
}
