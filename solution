const TAB_ID = Date.now() + '_' + Math.random();
const PING_KEY = 'tab-check-ping-' + TAB_ID;
const RESPONSE_KEY = 'tab-check-response-' + TAB_ID;
const CLOSE_SIGNAL_KEY = 'tab-close-' + TAB_ID;

let isDuplicate = false;

// Ping other tabs to check if this is a duplicate
localStorage.setItem(PING_KEY, 'ping');

// Handle storage events
window.addEventListener('storage', (e) => {
  // 1. Another tab pinged
  if (e.key && e.key.startsWith('tab-check-ping-')) {
    const newTabId = e.key.substring('tab-check-ping-'.length);
    const newTabResponseKey = 'tab-check-response-' + newTabId;

    // Notify user on main tab
    alert('ðŸš¨ A duplicate tab has been opened.');

    // Tell the duplicate tab it's a duplicate
    localStorage.setItem(newTabResponseKey, 'duplicate');
  }

  // 2. If we are the duplicate tab and get a response
  if (e.key === RESPONSE_KEY && e.newValue === 'duplicate') {
    isDuplicate = true;
    console.log('This is a duplicate tab');

    // Submit hidden form (simulate conflict)
    const form = document.createElement('form');
    form.style.display = 'none';
    form.method = 'POST';
    form.action = '/submit-duplicate'; // Simulated endpoint that gives 409
    document.body.appendChild(form);
    form.submit();
  }

  // 3. Main tab receives 409 alert trigger from duplicate tab
  if (e.key && e.key.startsWith('tab-conflict-')) {
    const dupTabId = e.key.substring('tab-conflict-'.length);
    const closeKey = 'tab-close-' + dupTabId;

    // Show alert to user on main tab
    alert('ðŸš¨ A duplicate tab caused a conflict and will now be closed.');

    // Send close signal to duplicate
    localStorage.setItem(closeKey, 'close');
  }

  // 4. Duplicate tab receives close signal
  if (e.key === CLOSE_SIGNAL_KEY && e.newValue === 'close') {
    window.close();

    // Fallback if window.close is blocked
    setTimeout(() => {
      document.body.innerHTML = '<h1>This tab was a duplicate and has been deactivated.</h1>';
    }, 100);
  }
});

// Step 3: Main tab confirmation
setTimeout(() => {
  if (!isDuplicate) {
    console.log('âœ… This is the first tab.');
  }
}, 300);

// âž• Simulate receiving 409 in the duplicate tab (example only)
window.addEventListener('load', () => {
  if (isDuplicate) {
    // Simulate the 409 response with a delay
    setTimeout(() => {
      // Notify main tab of conflict
      const conflictKey = 'tab-conflict-' + TAB_ID;
      localStorage.setItem(conflictKey, '409');
    }, 1000);
  }
});
